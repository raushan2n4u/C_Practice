Program 2



This is the well known maximal sum of a monotonically (continuously) increasing sub array in an array problem. But I expect you to really understand the problem and solution rather than just giving the correct code. So, let us start from the problem. Given an array for example

3, 4, 67, 12, -1,100, 99

we have 5 continuously increasing sub array here 

1.3, 4, 67 - sum 74

2.12 - sum 12
3.-1,100 - sum 99
4.100 - sum 100

5.99 - sum 99

Maximal sum is 100 and hence that should be our answer. Now how to get this? I'll give a bad code for this. This code is doing the sum of all possible sub arrays till a particular index 'i' (first for loop) and selecting the maximum of it. //Please ignore any syntax errors. 





 globalmax = a[0];
for ( i = 0; i< n; i++)
{
    sum = a[0]; maxsum = sum;
    for (j = 1; j < i; j++)
    {
       if(sum[j]&nbsp; <sum[j-1]) //monotonicity broken
       {
          if(sum > maxsum) maxsum = sum;
          sum = a[j]; //starting new sub array;
       }
       else
       {
          sum += a[j];
          if(sum < a[j]) sum = a[j];
       }
    }
    if(maxsum > globalmax)
       globalmax = maxsum; //sum till index i is the largest sum.
  }
  

Now, the complexity of above code is O(n^2). But as you can see a lot of calculations are repeated as we encounter the same sequences multiple times. By saving such calculations using dynamic programming we can solve this problem in O(n). So, your question is
1.What needs to be saved here? How much space is required for it?

2. A C code to implement this - given two lines of input - first line number of elements and second line the array elements, it should just output the maximal sum of any monotonically increasing sub array in it. 


You can submit the answer in a sentence for the first question - 70% mark. For the second question you can add the C code below the answer to the first one. 
